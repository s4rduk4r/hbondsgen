package hbondsgen.storage;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Iterator;
import java.util.Vector;

import hbondsgen.container.atom.EDonorAcceptorMarker;
import hbondsgen.container.atom.IAtom;
import hbondsgen.container.hbond.HBond;
import hbondsgen.container.molecule.IMolecule;
import hbondsgen.generator.DimerHBonds;
import hbondsgen.generator.HBonds;
import hbondsgen.math.Vector3d;

public class Storage {
	/*
	 * Properties
	 */
	//Singleton instance
	private static final Storage instance = new Storage();
	
	/*
	 * Interface
	 */
	//Get instance
	public static final Storage getInstance() {
		return instance;
	}
	
	//Store to screen
	public void toScreen(HBonds dimers) {
		System.out.println("# This is autogenerated file." +
							"\n# Please don't change anything, unless you know what you're doing.\n" +
							"# TITLE section");
		//Print TITLE
		System.out.printf("%s\n\n", dimers.title);
		//Print GEOMETRY
		System.out.println("# GEOMETRY section");
		for(IMolecule mol : dimers.monomer)
		{
			System.out.println(mol.getName());
			Iterator<IAtom> atoms = mol.getAtoms();
			Vector<IAtom> plane = mol.getPlaneAtoms();
			while(atoms.hasNext())
			{
				IAtom atom = atoms.next();
				Vector3d pos = atom.getPosition();
				EDonorAcceptorMarker dam = atom.getDAM();
				String sdam = EDonorAcceptorMarker.none == dam ? "" : 
								(EDonorAcceptorMarker.acceptor == dam ? "A" : "D");
				System.out.printf("%s\t%.6f\t%.6f\t%.6f\t%s\t%s\n", atom.getIMN().toUpperCase(), pos.x, pos.y, pos.z, sdam, plane.contains(atom) ? "P" : "");
			}
		}
		System.out.println();
		//Print HBOND
		System.out.println("# BONDS section");
		for(DimerHBonds dhb : dimers.hbonds)
		{
			for(int i = 0; i < 2; ++i)
			{
				HBond bond = dhb.get(i);
				IAtom[] atoms = new IAtom[2];
				if(bond.acceptor.getMolecule() == dimers.monomer[0]) {
					atoms[0] = bond.acceptor;
					atoms[1] = bond.donor;
				} else {
					atoms[0] = bond.donor;
					atoms[1] = bond.acceptor;
				}
				System.out.printf("%s:%s %s", atoms[0].getIMN().toUpperCase(), atoms[1].getIMN().toUpperCase(), i == 1 ? "\n" : "");
			}
		}
		System.out.println();
	}

	//Store to file
	public void toFile(HBonds dimers, String filename) throws IOException {
		BufferedWriter ifile = new BufferedWriter(new FileWriter(filename));
		//Pre-section info
		ifile.write("# This is autogenerated file." +
					"\n# Please don't change anything, unless you know what you're doing.\n" +
					"# TITLE section\n");
		//Print TITLE section
		ifile.write(dimers.title + "\n");
		ifile.newLine();
		//Print GEOMETRY section
		ifile.write("# GEOMETRY section\n");
		for(IMolecule mol : dimers.monomer)
		{
			ifile.write(mol.getName() + "\n");
			Iterator<IAtom> atoms = mol.getAtoms();
			Vector<IAtom> plane = mol.getPlaneAtoms();
			while(atoms.hasNext())
			{
				IAtom atom = atoms.next();
				Vector3d pos = atom.getPosition();
				EDonorAcceptorMarker dam = atom.getDAM();
				String sdam = EDonorAcceptorMarker.none == dam ? "" : 
								(EDonorAcceptorMarker.acceptor == dam ? "A" : "D");
				ifile.write(String.format("%s\t%.6f\t%.6f\t%.6f\t%s\t%s\n", 
										  atom.getIMN().toUpperCase(), 
										  pos.x, pos.y, pos.z, 
										  sdam, plane.contains(atom) ? "P" : ""));
			}
		}
		ifile.newLine();
		//Print BONDS section
		ifile.write("# BONDS section\n");
		for(DimerHBonds dhb : dimers.hbonds)
		{
			for(int i = 0; i < 2; ++i)
			{
				HBond bond = dhb.get(i);
				IAtom[] atoms = new IAtom[2];
				if(bond.acceptor.getMolecule() == dimers.monomer[0]) {
					atoms[0] = bond.acceptor;
					atoms[1] = bond.donor;
				} else {
					atoms[0] = bond.donor;
					atoms[1] = bond.acceptor;
				}
				ifile.write(String.format("%s:%s %s", atoms[0].getIMN().toUpperCase(), atoms[1].getIMN().toUpperCase(), i == 1 ? "\n" : ""));
			}
		}
		ifile.newLine();
		ifile.close();
	}
	
	/*
	 * Singleton constructor
	 */
	private Storage() {
	}
}
